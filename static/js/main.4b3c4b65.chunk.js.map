{"version":3,"sources":["Components/title.js","Components/input.js","Components/response.js","Components/main.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","title","subtitle","Input","placeholder","onChange","handleChange","onKeyDown","handleKeyPress","value","userInput","Response","cityData","location","data","currently","summary","precipProbability","temperature","toFixed","Main","App","state","event","input","target","setState","a","keyCode","fetch","json","response","this","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAaeA,G,MATD,SAACC,GACX,OACI,yBAAKC,UAAY,YACb,wBAAIA,UAAY,SAASD,EAAME,OAC/B,wBAAID,UAAY,YAAYD,EAAMG,aCG/BC,G,MARD,SAACJ,GACb,OACE,yBAAKC,UAAY,UACf,2BAAOA,UAAY,WAAWI,YAAY,sBAAsBC,SAAUN,EAAMO,aAAcC,UAAWR,EAAMS,eAAgBC,MAAOV,EAAMW,eCkBnIC,G,MArBE,SAACZ,GACd,OACI,yBAAKC,UAAY,eACO,OAAnBD,EAAMa,SACH,6BACI,wBAAIZ,UAAU,OAAOD,EAAMa,SAASC,UACpC,wBAAIb,UAAU,OAAd,WACA,uBAAGA,UAAU,UAAUD,EAAMa,SAASE,KAAKC,UAAUC,SACrD,wBAAIhB,UAAU,OAAd,4BACA,uBAAGA,UAAU,UAAUD,EAAMa,SAASE,KAAKC,UAAUE,kBAArD,KACA,wBAAIjB,UAAU,OAAd,eACA,uBAAGA,UAAU,YAAYD,EAAMa,SAASE,KAAKC,UAAUG,YAAY,KAAK,EAAE,IAAIC,QAAQ,GAAtF,UAGJ,QCDDC,G,MAVF,SAACrB,GACV,OACI,yBAAKC,UAAY,QACb,kBAAC,EAAD,CAAOC,MAASF,EAAME,MAAOC,SAAUH,EAAMG,WAC7C,kBAAC,EAAD,CAAOQ,UAAaX,EAAMW,UAAWJ,aAAgBP,EAAMO,aAAcE,eAAkBT,EAAMS,iBACjG,kBAAC,EAAD,CAAUI,SAAYb,EAAMa,cCoCzBS,G,iNA1CbC,MAAQ,CACNrB,MAAO,cACPC,SAAU,4EACVQ,UAAW,GACXE,SAAU,M,EAGZN,aAAe,SAAAiB,GACb,IAAMC,EAAQD,EAAME,OAAOhB,MAC3B,EAAKiB,SAAS,CAAEhB,UAAWc,K,EAG7BhB,e,uCAAiB,WAAMe,GAAN,iBAAAI,EAAA,yDACO,KAAlBJ,EAAMK,QADK,oBAEgB,KAAzB,EAAKN,MAAMZ,UAFF,gCAGQmB,MAAM,yCAAD,OACmB,EAAKP,MAAMZ,YAJ3C,cAGLI,EAHK,gBAMYA,EAAKgB,OANjB,OAMLC,EANK,OAOX,EAAKL,SAAS,CAACd,SAASmB,EAAUrB,UAAU,KAPjC,OAUX,EAAKgB,SAAS,CAAEhB,UAAW,KAVhB,4C,8HAef,OACE,6BACE,kBAAC,EAAD,CACET,MAAO+B,KAAKV,MAAMrB,MAClBC,SAAU8B,KAAKV,MAAMpB,SACrBQ,UAAWsB,KAAKV,MAAMZ,UACtBJ,aAAc0B,KAAK1B,aACnBE,eAAgBwB,KAAKxB,eACrBI,SAAUoB,KAAKV,MAAMV,gB,GApCbqB,cCQEC,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b3c4b65.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../CSS/title.css\"\n\n\nconst Title = (props) => {\n    return (\n        <div className = \"titleBox\">\n            <h1 className = \"title\">{props.title}</h1>\n            <h3 className = \"subtitle\">{props.subtitle}</h3>\n        </div>\n    )\n}\n\nexport default Title","import React from \"react\";\nimport \"../CSS/input.css\";\n\nconst Input = (props) => {\n  return (\n    <div className = \"midBox\">\n      <input className = \"inputBox\" placeholder=\"Enter Location Name\" onChange={props.handleChange} onKeyDown={props.handleKeyPress} value={props.userInput}></input>\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\"\nimport \"../CSS/response.css\"\n\nconst Response = (props) => {\n    return (\n        <div className = \"responseBox\">\n            {props.cityData !== null ? (\n                <div>\n                    <h3 className=\"loc\">{props.cityData.location}</h3>\n                    <h5 className=\"sub\">Summary</h5>\n                    <p className=\"return\">{props.cityData.data.currently.summary}</p>\n                    <h5 className=\"sub\">Precipitation Percentage</h5>\n                    <p className=\"return\">{props.cityData.data.currently.precipProbability}%</p>\n                    <h3 className=\"sub\">Temperature</h3>\n                    <p className=\"return\">{((props.cityData.data.currently.temperature-32)*(5/9)).toFixed(2)}Â°C</p>\n                </div>\n            ):(\n                null\n            )\n            }\n        </div>\n    )\n}\n\nexport default Response","import React from \"react\"\nimport Title from \"../Components/title\"\nimport Input from \"../Components/input\"\nimport Response from \"../Components/response\"\nimport \"../CSS/main.css\"\n\nconst Main = (props) => {\n    return (\n        <div className = \"main\">\n            <Title title = {props.title} subtitle={props.subtitle}/>\n            <Input userInput = {props.userInput} handleChange = {props.handleChange} handleKeyPress = {props.handleKeyPress}/>\n            <Response cityData = {props.cityData}/>\n        </div>\n    )\n}\n\nexport default Main","import React, { Component } from \"react\";\nimport Main from \"./Components/main.js\"\nimport \"./CSS/app.css\";\n\nclass App extends Component {\n  state = {\n    title: \"Weather App\",\n    subtitle: \"Enter a location name in the bar below and seach for the weather there...\",\n    userInput: \"\",\n    cityData: null\n  };\n\n  handleChange = event => {\n    const input = event.target.value;\n    this.setState({ userInput: input });\n  };\n\n  handleKeyPress = async event => {\n    if (event.keyCode === 13) {\n      if (this.state.userInput !== \"\") {\n        const data = await fetch(\n          `http://localhost:3005/weather?address=${this.state.userInput}`\n        );\n        const response = await data.json()\n        this.setState({cityData:response, userInput:\"\"})\n        \n      }\n        this.setState({ userInput: \"\" });\n      }\n    }\n\n  render() {\n    return (\n      <div>\n        <Main\n          title={this.state.title}\n          subtitle={this.state.subtitle}\n          userInput={this.state.userInput}\n          handleChange={this.handleChange}\n          handleKeyPress={this.handleKeyPress}\n          cityData={this.state.cityData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}